import pyaudio
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import os

import requests
import json

CHUNK = 1024                #記録したサンプルを分割するフレーム数
FORMAT = pyaudio.paInt16    #1サンプル辺りのデータの大きさ
CHANNELS = 1                #マイクの数
RATE = 44100                #サンプリングレート、1[s]に取得するサンプル数
RECORD_SECONDS = 1       #記録する時間
#(RATE * RECORD_SECONDS)で総サンプル数[frame]

VOICE_MODEL = np.array([
        1085, 2145, 2952, 3495, 3707, 3459, 2574, 1096, 0, 0, 0, 0, 0, 0, 0, 0, 0, 631, 2494, 4067, 5241, 5835, 5845, 5142, 3822, 2200, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 656, 1401, 2144, 2980, 3767, 4418, 4827, 4869, 4458, 3631, 2508, 1209, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1296, 2578, 3859, 5008, 5881, 6371, 6339, 5710, 4533, 2990, 1320, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 626, 1637, 2454, 3014, 3374, 3607, 3798, 3888, 3844, 3699, 3554, 3417, 3321, 3057, 2545, 1750, 717, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 714, 1647, 2389, 2935, 3286, 3454, 3447, 3329, 3149, 2837, 2350, 1706, 931, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 944, 1478, 1849, 2017, 1962, 1826, 1675, 1601, 1547, 1572, 1626, 1683, 1690, 1693, 1659, 1422, 1146, 803, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 832, 1101, 1326, 1515, 1705, 1760, 1717, 1596, 1469, 1317, 1094, 816, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1063, 1520, 1923, 2225, 2411, 2431, 2437, 2357, 2272, 2172, 1988, 1752, 1472, 1177, 842, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 939, 1202, 1463, 1640, 1733, 1707, 1511, 1259, 961, 608, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 763, 961, 1186, 1372, 1445, 1500, 1508, 1476, 1459, 1359, 1203, 959, 702, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 602, 761, 933, 1063, 1220, 1349, 1476, 1617, 1661, 1657, 1589, 1472, 1288, 1019, 695, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 620, 617, 607, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 631, 663, 676, 718, 739, 709, 666, 650, 614, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 662, 929, 1236, 1417, 1594, 1720, 1743, 1717, 1604, 1418, 1187, 953, 713, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 695, 800, 993, 1155, 1238, 1329, 1409, 1474, 1541, 1630, 1662, 1621, 1559, 1448, 1336, 1213, 1046, 864, 657, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 775, 964, 1102, 1271, 1452, 1573, 1584, 1541, 1392, 1216, 1044, 848, 641, 0, 0, 0, 0, 0, 0, 0, 762, 942, 1124, 1282, 1431, 1521, 1557, 1571, 1581, 1540, 1465, 1420, 1371, 1302, 1223, 1105, 936, 767, 628, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 616, 811, 1080, 1267, 1430, 1489, 1472, 1414, 1347, 1261, 1121, 969, 810, 712, 648, 618, 614, 650, 667, 730, 804, 866, 889, 901, 881, 891, 893, 837, 857, 825, 782, 783, 849, 867, 890, 892, 852, 841, 800, 724, 604, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 709, 880, 1000, 1000, 848, 620, 0, 0, 0, 0, 0, 0, 0, 0, 898, 1182, 1254, 1148, 991, 827, 655, 0, 0, 0, 0, 0, 0, 0, 0, 663, 1064, 1455, 1758, 1823, 1592, 1064, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 719, 951, 998, 981, 827, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 724, 986, 1112, 1160, 1097, 896, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 760, 840, 719, 0, 0, 0, 0, 0, 0, 0, 0, 0, 708, 866, 824, 763, 720, 665, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 696, 923, 1086, 1135, 1097, 916, 654, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 715, 812, 822, 721
])

def send_request():
    URL = 'http://192.168.179.12'
    res = requests.get(URL)
    txt = res.text
    print(txt)

def movave(arr, n):
    b = np.ones(n)/n 
    return np.convolve(arr, b, mode="valid")

def comparering(arr):

    model_length = len(VOICE_MODEL)
    result_list = np.array([])
    now_area = 0
    next_area = now_area + model_length
    while(1):
        if(next_area > len(arr)):
            break
        compared_shape = VOICE_MODEL / arr[now_area:next_area]
        sign_removed = np.array([compared_shape[~(np.isnan(compared_shape)+np.isposinf(compared_shape))]])
        zero_removed = sign_removed[~(sign_removed==np.zeros(len(sign_removed)))]
        
        result = np.var(zero_removed)
        result_list = np.append(result_list, result)
        now_area += 200
        next_area = now_area + model_length
    final_result = result_list[~np.isnan(result_list)]
    print(len(final_result), np.count_nonzero(final_result < 0.1))
    return np.count_nonzero(final_result < 0.1)

if __name__ == "__main__":

    audio = pyaudio.PyAudio()
    print(audio.get_default_input_device_info())

    while(1):
        stream = audio.open(format=FORMAT,
                    channels=CHANNELS,
                    rate=RATE,
                    input=True,
                    frames_per_buffer=CHUNK)

        print("* recording")

        frames = []
        cnt = 0
        tmp = 0
        sig = 0

        for i in range(0, int((RATE * RECORD_SECONDS) / CHUNK)): #(RATE * RECORD_SECONDS) / CHUNK 総サンプル数を CHUNK で分割(1チャンク/1024フレーム)。チャンク毎に処理
            data = stream.read(CHUNK)
            values = np.frombuffer(data,dtype="int16")
            top_points = np.array([])
            for value in values:
                if(value < 600):
                    value = 0

                if(value == 0 and sig == 1):
                    sig = 0
                    top_points = np.append(top_points, 0)
                elif(value > 0 and sig == 0):
                    sig = 1
                    cnt += 1
                    top_points = np.append(top_points, 1)
                else:
                    top_points = np.append(top_points, 0)

                frames.append(value)

        frames = np.trim_zeros(frames, 'f') # 前フレームの削除
        frames = np.trim_zeros(frames, 'b') # 後フレームの削除
        if(len(frames) == 0):
            continue
        
        point = comparering(frames)

        if(cnt/len(frames) > 0.02 and np.mean(frames) > 10000):
            print("金切声")
            break
        if(point >= 33):
            print("うめき声")
            break

        stream.stop_stream()
        stream.close()
    audio.terminate()
    send_request()